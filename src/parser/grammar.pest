// Pest syntax: 
// https://docs.rs/pest_derive/2.1.0/pest_derive/
// https://pest.rs/book/grammars/syntax.html

program = _{ SOI ~ top_level_decl* ~ EOI }

top_level_decl = _{ function_declaration }
    function_declaration = { "fn" ~ identifier ~ parameters ~ "->" ~ ty ~ block }

statement = _{ variable_declaration | return_statement | block | expression_statement }
    variable_declaration = { "let" ~ identifier ~ (":" ~ ty)? ~ ("=" ~ expression)? ~ ";" }
    return_statement = { "return" ~ expression? ~ ";" }
    expression_statement = { expression ~ ";" }


plus            = { "+" }
minus           = { "-" }
star            = { "*" }
slash           = { "/" }
equal           = { "=" }
equal_equal     = { "==" }
bang            = { "!" }
bang_equal      = { "!=" }
greater         = { ">" }
greater_equal   = { ">=" }
less            = { "<" }
less_equal      = { "<=" }
and             = { "&&" }
or              = { "||" }

unary_operator      =  { bang | minus }
logical_operator    =  _{ and | or }
binary_operator     =  _{ plus | minus | star | slash | equal_equal | bang_equal | greater | 
                          greater_equal | less | less_equal }

expression = { logical | binary | unary }
    logical     = { binary ~ (logical_operator ~ binary)* }
    binary      = { unary ~ (binary_operator ~ unary)* }
    unary       = { (unary_operator ~ unary) | call }
    call        = { primary ~ ( "(" ~ arguments? ~ ")" )* }
    primary     = _{ boolean | float | integer | identifier | "(" ~ expression ~ ")" }

// Utilities
parameters = {  "(" ~ (identifier ~ ":" ~ ty ~ ("," ~ identifier ~ ":" ~ ty)*)? ~ ")" }
arguments = { expression ~ ( "," ~ expression )* }
block = { "{" ~ statement* ~ "}" }

// Atoms
identifier = ${ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

ty = { identifier }

float = ${ float_characteristic ~ "." ~ float_mantissa }
    float_characteristic = { "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
    float_mantissa = { ASCII_DIGIT+ }

integer = ${ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

boolean = { "true" | "false" }

// Extra
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }